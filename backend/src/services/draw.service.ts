import { ClientDrawMessage } from "../models/ClientDrawMessage";
import { GameSession } from "../models/GameSession";
import { ServerDrawMessage } from "../models/ServerDrawMessage";
import User from "../models/UserModel";

let gameSession = new GameSession(15);

export async function handleDrawEvent(msg: ClientDrawMessage, io: any) {
	const user = await User.findOne({ _id: msg.userId });

	if (user == null) {
		return;
	}

	gameSession.placeColor(msg.place, user.color);
	io.emit('draw', new ServerDrawMessage(gameSession.currentState, null))
}

export function resetDraw(io: any) {
	gameSession.reset(15);

	io.emit('draw', new ServerDrawMessage(gameSession.currentState, null))
}

export async function emitTemplate(userId: string, io: any) {
	io.emit('draw', new ServerDrawMessage(template, userId));
	await sleep(10000);
	io.emit('draw', new ServerDrawMessage(gameSession.currentState, null))
}

function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


export const colors = [
	"#FF0000",
	"#00FF00",
	"#0000FF",
	"#FF00FF"
]

export const template = [
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#FF00FF",
	"#FF0000",
	"#FF00FF",
	"#FF0000",
	"#FF00FF",
	"#0000FF",
	"#0000FF",
	"#0000FF",
	"#FF00FF",
	"#0000FF",
	"#FF00FF",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF00FF",
	"#FF0000",
	"#FF00FF",
	"#FF0000",
	"#FF00FF",
	"#FF0000",
	"#0000FF",
	"#FF0000",
	"#FF00FF",
	"#0000FF",
	"#FF00FF",
	"#FF0000",
	"#00FF00",
	"#00FF00",
	"#FF0000",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF00FF",
	"#FF0000",
	"#0000FF",
	"#FF0000",
	"#FF00FF",
	"#0000FF",
	"#FF00FF",
	"#FF0000",
	"#00FF00",
	"#00FF00",
	"#FF0000",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#FF0000",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00",
	"#00FF00"
];
